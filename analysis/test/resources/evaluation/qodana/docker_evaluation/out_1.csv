id,lang,code,qodana_issues
1,java11,"import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double num1 = scanner.nextDouble()/scanner.nextDouble();
        System.out.print(num1);
    }
}","{""version"": ""3"", ""listProblem"": [{""tool"": ""Code Inspection"", ""category"": ""Resource management"", ""type"": ""I/O resource opened but not safely closed"", ""severity"": ""High"", ""comment"": ""'Scanner' should be opened in front of a 'try' block and closed in the corresponding 'finally' block"", ""detailsInfo"": ""Reports I/O resources that are not safely closed. I/O resources checked by this inspection include `java.io.InputStream`, `java.io.OutputStream`, `java.io.Reader`, `java.io.Writer`, `java.util.zip.ZipFile`, `java.io.Closeable` and `java.io.RandomAccessFile`.\n\n\nI/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void save() throws IOException {\n        FileWriter writer = new FileWriter(\""filename.txt\""); //warning\n        writer.write(\""sample\"");\n      }\n\n\nUse the following options to configure the inspection:\n\n* List I/O resource classes that do not need to be closed and should be ignored by this inspection.\n* Whether an I/O resource is allowed to be opened inside a `try`block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument."", ""sources"": [{""type"": ""file"", ""path"": ""src/main/java/solution_1/Main.java"", ""language"": ""JAVA"", ""line"": 5, ""offset"": 31, ""length"": 7, ""code"": {""startLine"": 3, ""length"": 7, ""offset"": 88, ""surroundingCode"": ""class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1 = scanner.nextDouble()/scanner.nextDouble();\n        System.out.print(num1);""}}], ""attributes"": {""inspectionName"": ""IOResource""}}, {""tool"": ""Code Inspection"", ""category"": ""Probable bugs"", ""type"": ""Wrong package statement"", ""severity"": ""Critical"", ""comment"": ""Missing package statement: 'solution_1'"", ""detailsInfo"": ""Detects `package` statements that do not correspond to the project directory structure. Also, reports classes without `package` statements if the class is not located directly in source root directory.\n\nWhile it's not strictly mandated by Java language, it's good to keep classes\nfrom package `com.example.myapp` inside the `com/example/myapp` directory under\nthe source root. Failure to do this may confuse code readers and make some tools working incorrectly."", ""sources"": [{""type"": ""file"", ""path"": ""src/main/java/solution_1/Main.java"", ""language"": ""JAVA"", ""line"": 3, ""offset"": 7, ""length"": 4, ""code"": {""startLine"": 1, ""length"": 4, ""offset"": 33, ""surroundingCode"": ""import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);""}}], ""attributes"": {""inspectionName"": ""WrongPackageStatement""}}]}"
2,python3,"text = input()
print(1 + 2 + 3)","{""version"": ""3"", ""listProblem"": [{""tool"": ""Code Inspection"", ""category"": ""Python"", ""type"": ""PEP 8 coding style violation"", ""severity"": ""Moderate"", ""comment"": ""PEP 8: W292 no newline at end of file"", ""detailsInfo"": ""Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."", ""sources"": [{""type"": ""file"", ""path"": ""solution_2/main.py"", ""language"": ""Python"", ""line"": 2, ""offset"": 16, ""length"": 1, ""code"": {""startLine"": 1, ""length"": 1, ""offset"": 30, ""surroundingCode"": ""text = input()\nprint(1 + 2 + 3)""}}], ""attributes"": {""inspectionName"": ""PyPep8Inspection""}}]}"
3,java11,"import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int year = scanner.nextInt();
        int month = scanner.nextInt();
        LocalDate localDate = LocalDate.of(year, month, 1);
        for (int i = 1; i < localDate.lengthOfMonth(); i++) {
            DayOfWeek dayOfWeek = localDate.withDayOfMonth(i).getDayOfWeek();
            if (dayOfWeek.name().equals(""MONDAY"")) {
                System.out.println(localDate.withDayOfMonth(i).toString());
            }
        }
    }
}
","{""version"": ""3"", ""listProblem"": [{""tool"": ""Code Inspection"", ""category"": ""Resource management"", ""type"": ""I/O resource opened but not safely closed"", ""severity"": ""High"", ""comment"": ""'Scanner' should be opened in front of a 'try' block and closed in the corresponding 'finally' block"", ""detailsInfo"": ""Reports I/O resources that are not safely closed. I/O resources checked by this inspection include `java.io.InputStream`, `java.io.OutputStream`, `java.io.Reader`, `java.io.Writer`, `java.util.zip.ZipFile`, `java.io.Closeable` and `java.io.RandomAccessFile`.\n\n\nI/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void save() throws IOException {\n        FileWriter writer = new FileWriter(\""filename.txt\""); //warning\n        writer.write(\""sample\"");\n      }\n\n\nUse the following options to configure the inspection:\n\n* List I/O resource classes that do not need to be closed and should be ignored by this inspection.\n* Whether an I/O resource is allowed to be opened inside a `try`block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument."", ""sources"": [{""type"": ""file"", ""path"": ""src/main/java/solution_3/Main.java"", ""language"": ""JAVA"", ""line"": 7, ""offset"": 31, ""length"": 7, ""code"": {""startLine"": 5, ""length"": 7, ""offset"": 88, ""surroundingCode"": ""class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int year = scanner.nextInt();\n        int month = scanner.nextInt();""}}], ""attributes"": {""inspectionName"": ""IOResource""}}, {""tool"": ""Code Inspection"", ""category"": ""Probable bugs"", ""type"": ""Wrong package statement"", ""severity"": ""Critical"", ""comment"": ""Missing package statement: 'solution_3'"", ""detailsInfo"": ""Detects `package` statements that do not correspond to the project directory structure. Also, reports classes without `package` statements if the class is not located directly in source root directory.\n\nWhile it's not strictly mandated by Java language, it's good to keep classes\nfrom package `com.example.myapp` inside the `com/example/myapp` directory under\nthe source root. Failure to do this may confuse code readers and make some tools working incorrectly."", ""sources"": [{""type"": ""file"", ""path"": ""src/main/java/solution_3/Main.java"", ""language"": ""JAVA"", ""line"": 5, ""offset"": 7, ""length"": 4, ""code"": {""startLine"": 3, ""length"": 4, ""offset"": 33, ""surroundingCode"": ""import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);""}}], ""attributes"": {""inspectionName"": ""WrongPackageStatement""}}]}"
