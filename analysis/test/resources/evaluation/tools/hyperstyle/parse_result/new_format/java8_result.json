{
  "quality": {
    "code": "BAD",
    "text": "Code quality (beta): BAD"
  },
  "file_review_results": [
    {
      "file_name": "solution_2636912/code.java",
      "quality": {
        "code": "GOOD",
        "text": "Code quality (beta): GOOD"
      },
      "issues": [
        {
          "code": "UnusedPrivateMethod",
          "text": "Avoid unused private methods such as 'rehash()'.",
          "line": "private void rehash() {",
          "line_number": 69,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "InefficientStringBuffering",
          "text": "Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().",
          "line": "tableStringBuilder.append(i + \": null\");",
          "line_number": 86,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "InefficientStringBuffering",
          "text": "Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().",
          "line": "tableStringBuilder.append(i + \": key=\" + table[i].getKey()",
          "line_number": 88,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "MagicNumberCheck",
          "text": "Found a magic number. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future.\nHowever, for small programs it can be allowed, but it is better to use constants instead of magic numbers.",
          "line": "HashTable<String> data = new HashTable<>(5);",
          "line_number": 105,
          "column_number": 50,
          "category": "INFO",
          "difficulty": "EASY",
          "influence_on_penalty": 0
        }
      ]
    },
    {
      "file_name": "solution_2637248/code.java",
      "quality": {
        "code": "BAD",
        "text": "Code quality (beta): BAD"
      },
      "issues": [
        {
          "code": "UnusedPrivateMethod",
          "text": "Avoid unused private methods such as 'rehash()'.",
          "line": "private void rehash() {",
          "line_number": 73,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "InefficientStringBuffering",
          "text": "Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().",
          "line": "tableStringBuilder.append(i + \": null\");",
          "line_number": 90,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "InefficientStringBuffering",
          "text": "Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().",
          "line": "tableStringBuilder.append(i + \": key=\" + table[i].getKey()",
          "line_number": 92,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "MissingSwitchDefaultCheck",
          "text": "switch without \"default\" clause.",
          "line": "switch (command) {",
          "line_number": 112,
          "column_number": 13,
          "category": "ERROR_PRONE",
          "difficulty": "HARD",
          "influence_on_penalty": 0
        },
        {
          "code": "NoWhitespaceAfterCheck",
          "text": "'-' is followed by whitespace.",
          "line": "System.out.println(val == null ? - 1: val);",
          "line_number": 118,
          "column_number": 54,
          "category": "CODE_STYLE",
          "difficulty": "EASY",
          "influence_on_penalty": 0
        },
        {
          "code": "WhitespaceAroundCheck",
          "text": "':' is not preceded with whitespace.",
          "line": "System.out.println(val == null ? - 1: val);",
          "line_number": 118,
          "column_number": 57,
          "category": "CODE_STYLE",
          "difficulty": "EASY",
          "influence_on_penalty": 0
        }
      ]
    },
    {
      "file_name": "solution_2693460/code.java",
      "quality": {
        "code": "BAD",
        "text": "Code quality (beta): BAD"
      },
      "issues": [
        {
          "code": "IndentationCheck",
          "text": "'method def' child has incorrect indentation level 13, expected level should be 12.",
          "line": "removed = true;",
          "line_number": 23,
          "column_number": 14,
          "category": "CODE_STYLE",
          "difficulty": "EASY",
          "influence_on_penalty": 0
        },
        {
          "code": "IndentationCheck",
          "text": "'method def' child has incorrect indentation level 13, expected level should be 12.",
          "line": "return removed;",
          "line_number": 27,
          "column_number": 14,
          "category": "CODE_STYLE",
          "difficulty": "EASY",
          "influence_on_penalty": 0
        },
        {
          "code": "UnusedPrivateMethod",
          "text": "Avoid unused private methods such as 'rehash()'.",
          "line": "private void rehash() {",
          "line_number": 82,
          "column_number": 1,
          "category": "BEST_PRACTICES",
          "difficulty": "MEDIUM",
          "influence_on_penalty": 0
        },
        {
          "code": "MagicNumberCheck",
          "text": "Found a magic number. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future.\nHowever, for small programs it can be allowed, but it is better to use constants instead of magic numbers.",
          "line": "HashTable<String> ht = new HashTable(10000);",
          "line_number": 90,
          "column_number": 46,
          "category": "INFO",
          "difficulty": "EASY",
          "influence_on_penalty": 0
        },
        {
          "code": "AssignmentInOperand",
          "text": "Avoid assignments in operands",
          "line": "while (n-- > 0) {",
          "line_number": 92,
          "column_number": 1,
          "category": "ERROR_PRONE",
          "difficulty": "HARD",
          "influence_on_penalty": 0
        }
      ]
    }
  ]
}
